Docker For Developers
====================

Uses of Docker

    - Deployment gets the most attention 
    
Three skills to effectively use Docker

    - 0: Basic understanding of what a container is: a process running on your computer that is "contained"
    - 1: Getting files from your host into a running container
        - '-v' bind mount into the running container
    - 2: Networked world, have containers communicate with one another
        - '--link' 
    -3: Inject a little bit of information into your running container
        - '-e' set an environmental variable

Unit Tests

    - Only valuable when you run them
    - Problem: large test matrix
        - Docker image for each combination of differing implementations/hardware (Python 2.4 instead of 3.x etc.)

Dockerfile

    - Essentially, a procedular definition of "how to set up this environment"
    - Basically just a Bash script with some extra stuff

Integration Tests

    - Integration tests are inconvenient to run
    - Solution: create an image that runs your test suite
    - Use environmental variables inject settings

Docker state reset

    - Working on a new feature, doing hand testing
    - Problem: need to quickly reset database state
    - Pre-populate database image with data that you need to run tests
        - Start a new container to reset state
        - Every integration test you run gets its own database <-- you can run these in parallel

Demo of your app

    - Containerizing your app is hard to do right
    - Embrace doing it wrong <-- not safe, secure, robust, or scalable
    - Default way to do demos and reproduce bugs

Make Tools
    - MTA to capture sent emails
    - Proxies
    - Fake APIs


RedHat registry with Docker images
http://docks.docker.com/linux/started
